package genrsa

import (
	"crypto/rsa"
	"math/big"
	"reflect"
	"testing"
)

func TestGeneratePrivateKey(t *testing.T) {
	p1_1, _ := new(big.Int).SetString("307502102841719013944828209032612417029", 10)
	p2_1, _ := new(big.Int).SetString("280181915998078719971845806172733695253", 10)
	N_1, _ := new(big.Int).SetString("307502102841719013944828209032612417029", 10) // p1_1 = N_1 temporary
	D_1, _ := new(big.Int).SetString("72493638695725594675269281115192969710365130235285274748155620250863216111745", 10)
	N_1.Mul(N_1, p2_1)

	collectAnswer1 := &rsa.PrivateKey{
		PublicKey: rsa.PublicKey{N: N_1, E: 65537},
		D:         D_1,
		Primes:    []*big.Int{p1_1, p2_1},
	}

	p1_2, _ := new(big.Int).SetString("32019879954845920683221435031981568638547530812577141669494262751610240585914652813457933844746890250182479762890279954092268976156587528408590693096155374140280302805211152098175542359540114499521808075460095727228615812960893715645666211936556492137516856346306863609697927290661883237237845037652010626203428796676339838995618900682667737264303894313316233293867549856083262019013449635546585833800950319460672461059260052330865919214497922281590301924167178377253764604945326320248713413325776686328042587576558858629863272784747072861657106825473082349816312190527187254324637268043208494662054437396807612782399", 10)
	p2_2, _ := new(big.Int).SetString("27649579864010942545780082724112896436382028986259157727672282144582141280574143322607923630457509836955610601150036682693455347888473648101330776446397688343113573246430174828309338469655085795873772675485255994912394391407020630657790794132187550538536742620402900774821184328451516795910251937386226620741999502893681857857185723973695433503288430085914860813707563778585693002817040598204616222466402221183512605068139654879533145879961363743269185928068433132336673280735427427239158271924856501501148297971604807859534090250709772864272897309154894554716671461873583743678737051152934788949681340658486769397673", 10)
	N_2, _ := new(big.Int).SetString("885336228047555376747619167349548490692457522704851695731631453779393339402470428042351908308550891070316024229953583136301552247663632623346991020812290994998809266025889695216862474411115511174739809084987155444547202874253935041149671666878850966493391984713577105825581553044864015849849262029998948421303026936785686655600942724286959036064232899263873776261370528421224960433495479700366773592082197927414228890209445038221774236901425299300928253053572782798021499899260061241341998265692854410499640632819473535584873770814336850566478031055957175736645028970187093956373069345578071393957639739213403545756034728796230890533045237403801087200010632445699632301483804966079846755861929464305996132476717688317651921088199680919434321521078049931359437618193875720607818325779990273977638813239931146926368945784524500409055305763494274104216253267741048191831571000757628556987889307550119749797579663505197800744607147862520068077559181655249740694312580615629043547980507022055224103798032759678880502188998723771737235203383123895627330490497676136474487884428622535398268561836531946920855152207831297081514335997850426825927594573279518812081680775808667496756448682338735711315941700874471707081600873245691376845957527", 10) // p1_1 = N_1 temporary
	D_2, _ := new(big.Int).SetString("305842687382648789684698688508686357771598308040310700693717077583128083434883050656558084808666740525687089561105163834259534963258993280018552523173020860380747391287763289435124684081780599859561915828983767936654846469522698465471848979021578434798821956054066949599328110242088000958856635066591027850806422781769503423757653589237480393922429052891253830577497120152837833654490404815849119644242808811460062896903151436064222785959813064012283376552678453431606676499065379655827743728508876266135341317531056973093695808035713967633932932894500365574830148708134882694848502219874079319456199760376450802995487668696711299606094871301097984886689111697770633710533614505631901597986736907813406494438779023231744405871415658442698998131449820184167615936119534690021468323875823125276380136865878234153611501661049970646684157826245033872761122836935791475607380776912986579558727150096555896038371159287773509888872870758582007874318207668532799290981560567518240901409633922923560257080629558573595485832507411762392948336168417773559353151214258044984964018775491706316121774360243389435662835208069124777652802010200699420627748979048866486386227588548457432129138828726652471867771239348939358902398249420438544745409793", 10)

	collectAnswer2 := &rsa.PrivateKey{
		PublicKey: rsa.PublicKey{N: N_2, E: 65537},
		D:         D_2,
		Primes:    []*big.Int{p1_2, p2_2},
	}

	type args struct {
		p1     *big.Int
		p2     *big.Int
		inputE int
	}
	tests := []struct {
		name    string
		args    args
		want    *rsa.PrivateKey
		wantErr bool
	}{
		{"test #1", args{p1_1, p2_1, 65537}, collectAnswer1, false},
		{"test #2", args{p1_2, p2_2, 65537}, collectAnswer2, false},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := GeneratePrivateKey(tt.args.p1, tt.args.p2, tt.args.inputE)
			got.Precomputed = tt.want.Precomputed // ignore "Precomputed"
			if (err != nil) != tt.wantErr {
				t.Errorf("GeneratePrivateKey() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("GeneratePrivateKey() = %v, want %v", got, tt.want)
			}
		})
	}
}
